name: CMake Multi-Platform Build

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Checkout repository (All)
      uses: actions/checkout@v4

    - name: Set build output directory (All)
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Configure (Linux and macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} \
                -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
                -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
                -DCMAKE_BUILD_TYPE=Release \
                -G Ninja \
                -S ${{ github.workspace }}
                
    - name: Build (Linux and macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config relwithdebinfo

    - name: Configure and Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      env:
        CCACHE_DISABLE: 1
      run: |
        CALL "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -B "%CD%\build" -G Ninja -S "%CD%"
        cmake --build "%CD%\build" --config relwithdebinfo


    - name: Upload Artifacts (All)
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}
        retention-days: 30
